usePrologVariables: true.

% maxTreeDepthInNodes                 = 6
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 1,439
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 2:12:51 5/29/24.  [Using 3,673,280 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.7177726688187552;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.8407692559551226;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.7177726688187552) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.8407692559551226) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.7177726688187552) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.8407692559551226) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #2 @ 2:12:51 5/29/24.  [Using 3,972,680 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.6065389873432717;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.7055880816896967;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.6065389873432717) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.7055880816896967) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.6065389873432717) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.7055880816896967) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #3 @ 2:12:51 5/29/24.  [Using 4,207,168 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.4763529580933742;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.5456932010885961;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.4763529580933742) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.5456932010885961) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.4763529580933742) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.5456932010885961) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #4 @ 2:12:51 5/29/24.  [Using 4,219,928 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.3594575801615111;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.4101222563681758;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.3594575801615111) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.4101222563681758) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.3594575801615111) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.4101222563681758) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #5 @ 2:12:51 5/29/24.  [Using 4,224,648 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.2705537201598595;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.31395098821214035;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.2705537201598595) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.31395098821214035) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.2705537201598595) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.31395098821214035) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #6 @ 2:12:51 5/29/24.  [Using 4,242,344 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.20698102574920246;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.2484034487839756;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.20698102574920246) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.2484034487839756) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.20698102574920246) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.2484034487839756) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #7 @ 2:12:51 5/29/24.  [Using 4,248,944 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.16165222251991482;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.20281585983917852;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.16165222251991482) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.20281585983917852) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.16165222251991482) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.20281585983917852) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #8 @ 2:12:52 5/29/24.  [Using 4,288,312 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.12870100359692618;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.16996710769776943;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.12870100359692618) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.16996710769776943) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.12870100359692618) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.16996710769776943) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #9 @ 2:12:52 5/29/24.  [Using 4,291,272 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.1041522382743206;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.1454517173929011;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.1041522382743206) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.1454517173929011) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.1041522382743206) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.1454517173929011) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #10 @ 2:12:52 5/29/24.  [Using 4,297,000 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.08542691215923782;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.1265827490786316;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.08542691215923782) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.1265827490786316) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.08542691215923782) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.1265827490786316) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree Combined @ 2:12:52 5/29/24.  [Using 4,300,736 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.07084338164787732;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.11167481425439783;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.07084338164787732) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.11167481425439783) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.07084338164787732) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.11167481425439783) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #12 @ 2:12:52 5/29/24.  [Using 4,336,240 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.05928181920341049;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.09963393642899895;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.05928181920341049) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.09963393642899895) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.05928181920341049) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.09963393642899895) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #13 @ 2:12:52 5/29/24.  [Using 4,338,472 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.04997728690357064;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.08972588646052149;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.04997728690357064) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.08972588646052149) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.04997728690357064) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.08972588646052149) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #14 @ 2:12:52 5/29/24.  [Using 4,340,992 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.04239376905778284;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.08144260949464718;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.04239376905778284) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.08144260949464718) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.04239376905778284) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.08144260949464718) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #15 @ 2:12:52 5/29/24.  [Using 4,343,920 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.03614656894662044;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.07442285611037076;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.03614656894662044) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.07442285611037076) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.03614656894662044) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.07442285611037076) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #16 @ 2:12:52 5/29/24.  [Using 4,346,880 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.03095349831460777;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.0684035044233846;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.03095349831460777) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.0684035044233846) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.03095349831460777) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.0684035044233846) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #17 @ 2:12:52 5/29/24.  [Using 4,349,280 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.02660345076225781;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.06318878505537366;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.02660345076225781) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.06318878505537366) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.02660345076225781) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.06318878505537366) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #18 @ 2:12:53 5/29/24.  [Using 4,402,880 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.02293568832253503;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.05863027029951525;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.02293568832253503) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.05863027029951525) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.02293568832253503) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.05863027029951525) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #19 @ 2:12:53 5/29/24.  [Using 4,405,632 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.019825880061191993;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.054613524971170314;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.019825880061191993) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.054613524971170314) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.019825880061191993) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.054613524971170314) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #20 @ 2:12:53 5/29/24.  [Using 4,408,008 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.017176492488304808;  // std dev = 0.347, 691.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=594 */
%   else return 0.05104899213472817;  // std dev = 0.131, 748.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=735 */


% Clauses:

recommendation(A, B, 0.017176492488304808) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.05104899213472817) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.017176492488304808) :-  /* #neg=97 #pos=594 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.05104899213472817) :-  /* #neg=13 #pos=735 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for recommendation.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).
stepLength_tree11(1.0).
stepLength_tree12(1.0).
stepLength_tree13(1.0).
stepLength_tree14(1.0).
stepLength_tree15(1.0).
stepLength_tree16(1.0).
stepLength_tree17(1.0).
stepLength_tree18(1.0).
stepLength_tree19(1.0).
stepLength_tree20(1.0).

logPrior(-1.8).
recommendation(A, B, Total) :- // A general accessor. 
   recommendation(A, B, 1000000, Total), !.
recommendation(A, B, Total) :- waitHere("This should not fail", recommendation(A, B, Total)).

recommendation(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_recommendation_tree1(A, B, TreesToUse, Total1),
   getScore_recommendation_tree2(A, B, TreesToUse, Total2),
   getScore_recommendation_tree3(A, B, TreesToUse, Total3),
   getScore_recommendation_tree4(A, B, TreesToUse, Total4),
   getScore_recommendation_tree5(A, B, TreesToUse, Total5),
   getScore_recommendation_tree6(A, B, TreesToUse, Total6),
   getScore_recommendation_tree7(A, B, TreesToUse, Total7),
   getScore_recommendation_tree8(A, B, TreesToUse, Total8),
   getScore_recommendation_tree9(A, B, TreesToUse, Total9),
   getScore_recommendation_tree10(A, B, TreesToUse, Total10),
   getScore_recommendation_tree11(A, B, TreesToUse, Total11),
   getScore_recommendation_tree12(A, B, TreesToUse, Total12),
   getScore_recommendation_tree13(A, B, TreesToUse, Total13),
   getScore_recommendation_tree14(A, B, TreesToUse, Total14),
   getScore_recommendation_tree15(A, B, TreesToUse, Total15),
   getScore_recommendation_tree16(A, B, TreesToUse, Total16),
   getScore_recommendation_tree17(A, B, TreesToUse, Total17),
   getScore_recommendation_tree18(A, B, TreesToUse, Total18),
   getScore_recommendation_tree19(A, B, TreesToUse, Total19),
   getScore_recommendation_tree20(A, B, TreesToUse, Total20),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10 + Total11 + Total12 + Total13 + Total14 + Total15 + Total16 + Total17 + Total18 + Total19 + Total20,
   !.
recommendation(A, B, TreesToUse, Total) :- waitHere("This should not fail", recommendation(A, B, TreesToUse, Total)).

getScore_recommendation_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_recommendation_tree1(A, B, TreesToUse, Total1) :- recommendation_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_recommendation_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_recommendation_tree2(A, B, TreesToUse, Total2) :- recommendation_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_recommendation_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_recommendation_tree3(A, B, TreesToUse, Total3) :- recommendation_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_recommendation_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_recommendation_tree4(A, B, TreesToUse, Total4) :- recommendation_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_recommendation_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_recommendation_tree5(A, B, TreesToUse, Total5) :- recommendation_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_recommendation_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_recommendation_tree6(A, B, TreesToUse, Total6) :- recommendation_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_recommendation_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_recommendation_tree7(A, B, TreesToUse, Total7) :- recommendation_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_recommendation_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_recommendation_tree8(A, B, TreesToUse, Total8) :- recommendation_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_recommendation_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_recommendation_tree9(A, B, TreesToUse, Total9) :- recommendation_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_recommendation_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_recommendation_tree10(A, B, TreesToUse, Total10) :- recommendation_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

getScore_recommendation_tree11(A, B, TreesToUse, 0.0) :- 11 > TreesToUse, !.
getScore_recommendation_tree11(A, B, TreesToUse, Total11) :- recommendation_tree11(A, B, Total), stepLength_tree11(StepLen), Total11 is Total * StepLen.

getScore_recommendation_tree12(A, B, TreesToUse, 0.0) :- 12 > TreesToUse, !.
getScore_recommendation_tree12(A, B, TreesToUse, Total12) :- recommendation_tree12(A, B, Total), stepLength_tree12(StepLen), Total12 is Total * StepLen.

getScore_recommendation_tree13(A, B, TreesToUse, 0.0) :- 13 > TreesToUse, !.
getScore_recommendation_tree13(A, B, TreesToUse, Total13) :- recommendation_tree13(A, B, Total), stepLength_tree13(StepLen), Total13 is Total * StepLen.

getScore_recommendation_tree14(A, B, TreesToUse, 0.0) :- 14 > TreesToUse, !.
getScore_recommendation_tree14(A, B, TreesToUse, Total14) :- recommendation_tree14(A, B, Total), stepLength_tree14(StepLen), Total14 is Total * StepLen.

getScore_recommendation_tree15(A, B, TreesToUse, 0.0) :- 15 > TreesToUse, !.
getScore_recommendation_tree15(A, B, TreesToUse, Total15) :- recommendation_tree15(A, B, Total), stepLength_tree15(StepLen), Total15 is Total * StepLen.

getScore_recommendation_tree16(A, B, TreesToUse, 0.0) :- 16 > TreesToUse, !.
getScore_recommendation_tree16(A, B, TreesToUse, Total16) :- recommendation_tree16(A, B, Total), stepLength_tree16(StepLen), Total16 is Total * StepLen.

getScore_recommendation_tree17(A, B, TreesToUse, 0.0) :- 17 > TreesToUse, !.
getScore_recommendation_tree17(A, B, TreesToUse, Total17) :- recommendation_tree17(A, B, Total), stepLength_tree17(StepLen), Total17 is Total * StepLen.

getScore_recommendation_tree18(A, B, TreesToUse, 0.0) :- 18 > TreesToUse, !.
getScore_recommendation_tree18(A, B, TreesToUse, Total18) :- recommendation_tree18(A, B, Total), stepLength_tree18(StepLen), Total18 is Total * StepLen.

getScore_recommendation_tree19(A, B, TreesToUse, 0.0) :- 19 > TreesToUse, !.
getScore_recommendation_tree19(A, B, TreesToUse, Total19) :- recommendation_tree19(A, B, Total), stepLength_tree19(StepLen), Total19 is Total * StepLen.

getScore_recommendation_tree20(A, B, TreesToUse, 0.0) :- 20 > TreesToUse, !.
getScore_recommendation_tree20(A, B, TreesToUse, Total20) :- recommendation_tree20(A, B, Total), stepLength_tree20(StepLen), Total20 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(recommendation, 1, [
   item(a, underscore)]).

%%%%%  WILL-Produced Tree Combined @ 2:12:53 5/29/24.  [Using 4,252,824 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 3.4937271525851763;  // std dev = 6.948, 13,820.000 (wgt'ed) examples reached here.  /* #neg=1,940 #pos=11,880 */
%   else return 4.462129845738782;  // std dev = 2.614, 14,960.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=14,700 */


% Clauses:

recommendation(A, B, 3.4937271525851763) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 4.462129845738782) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 3.4937271525851763) :-  /* #neg=1,940 #pos=11,880 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 4.462129845738782) :-  /* #neg=260 #pos=14,700 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)
