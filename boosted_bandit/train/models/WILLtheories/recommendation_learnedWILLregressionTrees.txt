usePrologVariables: true.

% maxTreeDepthInNodes                 = 6
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 1,499
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 21:07:15 5/25/24.  [Using 3,689,184 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.40716854294264493;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.7927538397316602;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.40716854294264493) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.7927538397316602) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.40716854294264493) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.7927538397316602) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #2 @ 21:07:15 5/25/24.  [Using 3,993,688 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.3500634922839128;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.6670857772886446;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.3500634922839128) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.6670857772886446) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.3500634922839128) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.6670857772886446) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #3 @ 21:07:15 5/25/24.  [Using 4,204,840 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   return 0;  // std dev = 0.412, 1,499.000 (wgt'ed) examples reached here.  /* #neg=393 #pos=1,106 */


% Clauses:

recommendation(A, B, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_recommendation(underscore, underscore, 0) :-  /* #neg=393 #pos=1,106 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #4 @ 21:07:16 5/25/24.  [Using 4,249,872 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.2884033413945263;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.5188343859847172;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.2884033413945263) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.5188343859847172) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.2884033413945263) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.5188343859847172) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #5 @ 21:07:16 5/25/24.  [Using 4,254,832 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.22914859192590217;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.39005486031823694;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.22914859192590217) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.39005486031823694) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.22914859192590217) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.39005486031823694) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #6 @ 21:07:16 5/25/24.  [Using 4,278,400 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.1773862456356715;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.2961350893430406;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.1773862456356715) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.2961350893430406) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.1773862456356715) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.2961350893430406) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #7 @ 21:07:16 5/25/24.  [Using 4,284,192 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.13511081673477787;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.23092903391113231;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.13511081673477787) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.23092903391113231) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.13511081673477787) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.23092903391113231) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #8 @ 21:07:16 5/25/24.  [Using 4,315,976 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.10199972425168541;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.18513389627057167;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.10199972425168541) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.18513389627057167) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.10199972425168541) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.18513389627057167) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #9 @ 21:07:17 5/25/24.  [Using 4,326,392 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.07667117701171229;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.15199739354802705;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.07667117701171229) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.15199739354802705) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.07667117701171229) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.15199739354802705) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #10 @ 21:07:17 5/25/24.  [Using 4,328,736 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.05753080258209654;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.12724836160738684;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.05753080258209654) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.12724836160738684) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.05753080258209654) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.12724836160738684) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree Combined @ 21:07:17 5/25/24.  [Using 4,331,112 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.04314919391443957;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.10822678061740022;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.04314919391443957) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.10822678061740022) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.04314919391443957) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.10822678061740022) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #12 @ 21:07:17 5/25/24.  [Using 4,367,832 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.03236778613377572;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.09324259921120787;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.03236778613377572) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.09324259921120787) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.03236778613377572) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.09324259921120787) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #13 @ 21:07:17 5/25/24.  [Using 4,370,688 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.02428987373578187;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.08118971254923635;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.02428987373578187) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.08118971254923635) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.02428987373578187) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.08118971254923635) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #14 @ 21:07:18 5/25/24.  [Using 4,373,000 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.018236193983405268;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.07132163752614948;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.018236193983405268) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.07132163752614948) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.018236193983405268) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.07132163752614948) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #15 @ 21:07:18 5/25/24.  [Using 4,375,424 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.013697100357306728;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.06311986612250184;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.013697100357306728) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.06311986612250184) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.013697100357306728) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.06311986612250184) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #16 @ 21:07:18 5/25/24.  [Using 4,378,192 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.010291615729402319;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.056214717624209716;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.010291615729402319) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.056214717624209716) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.010291615729402319) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.056214717624209716) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #17 @ 21:07:18 5/25/24.  [Using 4,380,880 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.007735189241048123;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.05033639899527499;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.007735189241048123) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.05033639899527499) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.007735189241048123) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.05033639899527499) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #18 @ 21:07:18 5/25/24.  [Using 4,434,432 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.005815198520669114;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.04528388295155609;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.005815198520669114) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.04528388295155609) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.005815198520669114) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.04528388295155609) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #19 @ 21:07:19 5/25/24.  [Using 4,439,192 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.0043726201639244676;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.04090458442819029;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.0043726201639244676) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.04090458442819029) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.0043726201639244676) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.04090458442819029) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)

%%%%%  WILL-Produced Tree #20 @ 21:07:19 5/25/24.  [Using 4,442,032 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 0.003288394695388915;  // std dev = 0.498, 765.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=420 */
%   else return 0.03708075913773193;  // std dev = 0.247, 734.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=686 */


% Clauses:

recommendation(A, B, 0.003288394695388915) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 0.03708075913773193) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 0.003288394695388915) :-  /* #neg=345 #pos=420 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 0.03708075913773193) :-  /* #neg=48 #pos=686 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for recommendation.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).
stepLength_tree11(1.0).
stepLength_tree12(1.0).
stepLength_tree13(1.0).
stepLength_tree14(1.0).
stepLength_tree15(1.0).
stepLength_tree16(1.0).
stepLength_tree17(1.0).
stepLength_tree18(1.0).
stepLength_tree19(1.0).
stepLength_tree20(1.0).

logPrior(-1.8).
recommendation(A, B, Total) :- // A general accessor. 
   recommendation(A, B, 1000000, Total), !.
recommendation(A, B, Total) :- waitHere("This should not fail", recommendation(A, B, Total)).

recommendation(A, B, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_recommendation_tree1(A, B, TreesToUse, Total1),
   getScore_recommendation_tree2(A, B, TreesToUse, Total2),
   getScore_recommendation_tree3(A, B, TreesToUse, Total3),
   getScore_recommendation_tree4(A, B, TreesToUse, Total4),
   getScore_recommendation_tree5(A, B, TreesToUse, Total5),
   getScore_recommendation_tree6(A, B, TreesToUse, Total6),
   getScore_recommendation_tree7(A, B, TreesToUse, Total7),
   getScore_recommendation_tree8(A, B, TreesToUse, Total8),
   getScore_recommendation_tree9(A, B, TreesToUse, Total9),
   getScore_recommendation_tree10(A, B, TreesToUse, Total10),
   getScore_recommendation_tree11(A, B, TreesToUse, Total11),
   getScore_recommendation_tree12(A, B, TreesToUse, Total12),
   getScore_recommendation_tree13(A, B, TreesToUse, Total13),
   getScore_recommendation_tree14(A, B, TreesToUse, Total14),
   getScore_recommendation_tree15(A, B, TreesToUse, Total15),
   getScore_recommendation_tree16(A, B, TreesToUse, Total16),
   getScore_recommendation_tree17(A, B, TreesToUse, Total17),
   getScore_recommendation_tree18(A, B, TreesToUse, Total18),
   getScore_recommendation_tree19(A, B, TreesToUse, Total19),
   getScore_recommendation_tree20(A, B, TreesToUse, Total20),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10 + Total11 + Total12 + Total13 + Total14 + Total15 + Total16 + Total17 + Total18 + Total19 + Total20,
   !.
recommendation(A, B, TreesToUse, Total) :- waitHere("This should not fail", recommendation(A, B, TreesToUse, Total)).

getScore_recommendation_tree1(A, B, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_recommendation_tree1(A, B, TreesToUse, Total1) :- recommendation_tree1(A, B, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_recommendation_tree2(A, B, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_recommendation_tree2(A, B, TreesToUse, Total2) :- recommendation_tree2(A, B, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_recommendation_tree3(A, B, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_recommendation_tree3(A, B, TreesToUse, Total3) :- recommendation_tree3(A, B, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_recommendation_tree4(A, B, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_recommendation_tree4(A, B, TreesToUse, Total4) :- recommendation_tree4(A, B, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_recommendation_tree5(A, B, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_recommendation_tree5(A, B, TreesToUse, Total5) :- recommendation_tree5(A, B, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_recommendation_tree6(A, B, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_recommendation_tree6(A, B, TreesToUse, Total6) :- recommendation_tree6(A, B, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_recommendation_tree7(A, B, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_recommendation_tree7(A, B, TreesToUse, Total7) :- recommendation_tree7(A, B, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_recommendation_tree8(A, B, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_recommendation_tree8(A, B, TreesToUse, Total8) :- recommendation_tree8(A, B, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_recommendation_tree9(A, B, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_recommendation_tree9(A, B, TreesToUse, Total9) :- recommendation_tree9(A, B, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_recommendation_tree10(A, B, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_recommendation_tree10(A, B, TreesToUse, Total10) :- recommendation_tree10(A, B, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

getScore_recommendation_tree11(A, B, TreesToUse, 0.0) :- 11 > TreesToUse, !.
getScore_recommendation_tree11(A, B, TreesToUse, Total11) :- recommendation_tree11(A, B, Total), stepLength_tree11(StepLen), Total11 is Total * StepLen.

getScore_recommendation_tree12(A, B, TreesToUse, 0.0) :- 12 > TreesToUse, !.
getScore_recommendation_tree12(A, B, TreesToUse, Total12) :- recommendation_tree12(A, B, Total), stepLength_tree12(StepLen), Total12 is Total * StepLen.

getScore_recommendation_tree13(A, B, TreesToUse, 0.0) :- 13 > TreesToUse, !.
getScore_recommendation_tree13(A, B, TreesToUse, Total13) :- recommendation_tree13(A, B, Total), stepLength_tree13(StepLen), Total13 is Total * StepLen.

getScore_recommendation_tree14(A, B, TreesToUse, 0.0) :- 14 > TreesToUse, !.
getScore_recommendation_tree14(A, B, TreesToUse, Total14) :- recommendation_tree14(A, B, Total), stepLength_tree14(StepLen), Total14 is Total * StepLen.

getScore_recommendation_tree15(A, B, TreesToUse, 0.0) :- 15 > TreesToUse, !.
getScore_recommendation_tree15(A, B, TreesToUse, Total15) :- recommendation_tree15(A, B, Total), stepLength_tree15(StepLen), Total15 is Total * StepLen.

getScore_recommendation_tree16(A, B, TreesToUse, 0.0) :- 16 > TreesToUse, !.
getScore_recommendation_tree16(A, B, TreesToUse, Total16) :- recommendation_tree16(A, B, Total), stepLength_tree16(StepLen), Total16 is Total * StepLen.

getScore_recommendation_tree17(A, B, TreesToUse, 0.0) :- 17 > TreesToUse, !.
getScore_recommendation_tree17(A, B, TreesToUse, Total17) :- recommendation_tree17(A, B, Total), stepLength_tree17(StepLen), Total17 is Total * StepLen.

getScore_recommendation_tree18(A, B, TreesToUse, 0.0) :- 18 > TreesToUse, !.
getScore_recommendation_tree18(A, B, TreesToUse, Total18) :- recommendation_tree18(A, B, Total), stepLength_tree18(StepLen), Total18 is Total * StepLen.

getScore_recommendation_tree19(A, B, TreesToUse, 0.0) :- 19 > TreesToUse, !.
getScore_recommendation_tree19(A, B, TreesToUse, Total19) :- recommendation_tree19(A, B, Total), stepLength_tree19(StepLen), Total19 is Total * StepLen.

getScore_recommendation_tree20(A, B, TreesToUse, 0.0) :- 20 > TreesToUse, !.
getScore_recommendation_tree20(A, B, TreesToUse, Total20) :- recommendation_tree20(A, B, Total), stepLength_tree20(StepLen), Total20 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(recommendation, 1, [
   item(a, underscore)]).

%%%%%  WILL-Produced Tree Combined @ 21:07:19 5/25/24.  [Using 4,277,456 memory cells.]  %%%%%

% FOR recommendation(A, B):
%   if ( item(B, C) )
%   then return 2.275129242632452;  // std dev = 9.952, 15,300.000 (wgt'ed) examples reached here.  /* #neg=6,900 #pos=8,400 */
%   else return 4.525927963150429;  // std dev = 4.944, 14,680.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=13,720 */


% Clauses:

recommendation(A, B, 2.275129242632452) :- 
     item(B, C), 
     !. // Clause #1.

recommendation(A, B, 4.525927963150429) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_recommendation(underscore, a, 2.275129242632452) :-  /* #neg=6,900 #pos=8,400 */ 
   item(a, underscore),
   !. // Flattened version of clause #1.

flattened_recommendation(underscore, underscore, 4.525927963150429) :-  /* #neg=960 #pos=13,720 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   item(a, underscore)
